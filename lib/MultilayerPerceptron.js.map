{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 808d204a5b3d7ae1aa7a","webpack:///./src/index.js"],"names":["NeuronLayer","neuronCount","_neuronCount","InputLayer","inputValues","dendrites","getDendrites","length","Error","i","dendrite","inputValue","fire","neurons","getNeurons","allDendrites","neuron","getInboundDendrites","concat","MultilayerPerceptron","neuronCounts","_neuronCounts","_inputLayer"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;IC/DMA,W,GACJ,qBAAYC,WAAZ,EAAyB;AAAA;;AACvB,OAAKC,YAAL,GAAoBD,WAApB;AACD,C;;IAGGE,U;;;AAEJ,sBAAYF,WAAZ,EAAyB;AAAA;;AAAA,mHACjBA,WADiB;AAExB;;;;yBAEIG,W,EAAa;AAChB,UAAIC,YAAY,KAAKC,YAAL,EAAhB;;AAEA;AACA,UAAID,UAAUE,MAAV,KAAqBH,YAAYG,MAArC,EAA6C;AAC3C,cAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,UAAUE,MAA9B,EAAsCE,GAAtC,EAA2C;AACzC,YAAIC,WAAWL,UAAUI,CAAV,CAAf;AACA,YAAIE,aAAaP,YAAYK,CAAZ,CAAjB;;AAEAC,iBAASE,IAAT,CAAcD,UAAd;AACD;AACF;;;mCAEc;AACb,UAAME,UAAU,KAAKC,UAAL,EAAhB;AACA,UAAIC,eAAe,EAAnB;;AAEA,WAAK,IAAIN,IAAI,CAAb,EAAgBA,IAAII,QAAQN,MAA5B,EAAoCE,GAApC,EAAyC;AACvC,YAAIO,SAASH,QAAQJ,CAAR,CAAb;AACA,YAAIJ,YAAYW,OAAOC,mBAAP,EAAhB;;AAEAF,uBAAeA,aAAaG,MAAb,CAAoBb,SAApB,CAAf;AACD;AACD,aAAOU,YAAP;AACD;;;;EAjCsBf,W;;IAoCJmB,oB;AAEnB,gCAAYC,YAAZ,EAA0B;AAAA;;AACxB,SAAKC,aAAL,GAAqBD,YAArB;AACA,SAAKE,WAAL,GAAmB,IAAInB,UAAJ,CAAeiB,aAAa,CAAb,CAAf,CAAnB;AACD;;;;wBAEkB;AACjB,aAAO,KAAKC,aAAZ;AACD;;;wBAEiB;AAChB,aAAO,KAAKA,aAAL,CAAmBd,MAA1B;AACD;;;wBAEgB;AACf,aAAO,KAAKe,WAAZ;AACD;;;;;;kBAjBkBH,oB","file":"MultilayerPerceptron.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"MultilayerPerceptron\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MultilayerPerceptron\"] = factory();\n\telse\n\t\troot[\"MultilayerPerceptron\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 808d204a5b3d7ae1aa7a","\nclass NeuronLayer {\n  constructor(neuronCount) {\n    this._neuronCount = neuronCount;\n  }\n}\n\nclass InputLayer extends NeuronLayer {\n\n  constructor(neuronCount) {\n    super(neuronCount);\n  }\n\n  fire(inputValues) {\n    let dendrites = this.getDendrites();\n\n    // make sure that the input value count matches the dendrite count\n    if (dendrites.length !== inputValues.length) {\n      throw new Error('InputLayer: invalid input value array');\n    }\n\n    for (let i = 0; i < dendrites.length; i++) {\n      let dendrite = dendrites[i];\n      let inputValue = inputValues[i];\n\n      dendrite.fire(inputValue);\n    }\n  }\n\n  getDendrites() {\n    const neurons = this.getNeurons();\n    let allDendrites = [];\n\n    for (let i = 0; i < neurons.length; i++) {\n      let neuron = neurons[i];\n      let dendrites = neuron.getInboundDendrites();\n\n      allDendrites = allDendrites.concat(dendrites);\n    }\n    return allDendrites;\n  }\n}\n\nexport default class MultilayerPerceptron {\n\n  constructor(neuronCounts) {\n    this._neuronCounts = neuronCounts;\n    this._inputLayer = new InputLayer(neuronCounts[0]);\n  }\n\n  get neuronCounts() {\n    return this._neuronCounts;\n  }\n\n  get layersCount() {\n    return this._neuronCounts.length;\n  }\n\n  get inputLayer() {\n    return this._inputLayer;\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}